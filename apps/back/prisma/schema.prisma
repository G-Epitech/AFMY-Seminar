// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MA
  FE
  OT
}

enum AstrologicalSign {
  ARIES
  TAURUS
  GEMINI
  CANCER
  LEO
  VIRGO
  LIBRA
  SCORPIO
  SAGITTARIUS
  CAPRICORN
  AQUARIUS
  PISCES
}

enum PhotoFormat {
  JPEG
  PNG
  GIF
}

model Customer {
  id          Int              @id @default(autoincrement())
  email       String           @unique
  legacyId    Int?             @unique
  name        String
  surname     String
  description String
  birthDate   DateTime
  gender      Gender
  sign        AstrologicalSign
  phone       String?
  photo       String?
  photoFormat PhotoFormat?
  address     String?
  coach       Employee?        @relation(fields: [coachId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  coachId     Int?
  events      Event[]          @relation("EventAttendees")
  encounters  Encounter[]
  payements   Payment[]
  clothes     Clothe[]         @relation("ClotheOwner")
  createdAt   DateTime         @default(now())
  country     String?
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  PAYPAL
}

model Payment {
  id         Int           @id @default(autoincrement())
  legacyId   Int?          @unique
  date       DateTime
  amount     Float
  method     PaymentMethod
  comment    String?
  customer   Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId Int
}

enum Permission {
  MANAGER
  COACH
}

model Employee {
  id          Int           @id @default(autoincrement())
  legacyId    Int?          @unique
  email       String        @unique
  name        String
  surname     String
  birthDate   DateTime
  gender      Gender
  phone       String?
  photo       String?
  photoFormat PhotoFormat?
  address     String?
  permission  Permission
  role        String
  coachees    Customer[]
  events      Event[]
  credentials Credentials[]
}

model Credentials {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId Int
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String
  x      String
  y      String
  events Event[]
}

model Event {
  id              Int        @id @default(autoincrement())
  legacyId        Int?       @unique
  title           String
  date            DateTime
  maxParticipants Int
  location        Location   @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  locationId      Int
  type            String
  attendees       Customer[] @relation("EventAttendees")
  employee        Employee   @relation(fields: [employeeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  employeeId      Int
}

enum EncounterStatus {
  PENDING
  DONE
  CANCELED
}

model Encounter {
  id         Int             @id @default(autoincrement())
  legacyId   Int?            @unique
  customer   Customer        @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId Int
  date       DateTime
  rating     Int?            @default(0)
  comment    String?
  source     String
  status     EncounterStatus
  isPositive Boolean?
}

model Tip {
  id       Int    @id @default(autoincrement())
  legacyId Int?   @unique
  title    String
  content  String
}

enum ClothesType {
  HAT_CAP
  BOTTOM
  TOP
  SHOES
}

model Clothe {
  id        Int         @id @default(autoincrement())
  legacyId  Int?        @unique
  type      ClothesType
  image     String
  customers Customer[]  @relation("ClotheOwner")
}
